module nacl.constants;

/*
   Header
   */

enum crypto_auth_PRIMITIVE = "hmacsha512256";
alias crypto_auth = crypto_auth_hmacsha512256;
alias crypto_auth_verify = crypto_auth_hmacsha512256_verify;
alias crypto_auth_BYTES = crypto_auth_hmacsha512256_BYTES;
alias crypto_auth_KEYBYTES = crypto_auth_hmacsha512256_KEYBYTES;
alias crypto_auth_IMPLEMENTATION = crypto_auth_hmacsha512256_IMPLEMENTATION;
alias crypto_auth_VERSION = crypto_auth_hmacsha512256_VERSION;
enum crypto_auth_hmacsha512256_tweet_BYTES = 32;
enum crypto_auth_hmacsha512256_tweet_KEYBYTES = 32;
extern int crypto_auth_hmacsha512256_tweet(ubyte *,const ubyte *,ulong,const ubyte *);
extern int crypto_auth_hmacsha512256_tweet_verify(const ubyte *,const ubyte *,ulong,const ubyte *);
enum crypto_auth_hmacsha512256_tweet_VERSION = "-";
alias crypto_auth_hmacsha512256 = crypto_auth_hmacsha512256_tweet;
alias crypto_auth_hmacsha512256_verify = crypto_auth_hmacsha512256_tweet_verify;
alias crypto_auth_hmacsha512256_BYTES = crypto_auth_hmacsha512256_tweet_BYTES;
alias crypto_auth_hmacsha512256_KEYBYTES = crypto_auth_hmacsha512256_tweet_KEYBYTES;
alias crypto_auth_hmacsha512256_VERSION = crypto_auth_hmacsha512256_tweet_VERSION;
enum crypto_auth_hmacsha512256_IMPLEMENTATION = "crypto_auth/hmacsha512256/tweet";

enum crypto_box_PRIMITIVE = "curve25519xsalsa20poly1305";
//alias crypto_box = crypto_box_curve25519xsalsa20poly1305;
//alias crypto_box_open = crypto_box_curve25519xsalsa20poly1305_open;
//alias crypto_box_keypair = crypto_box_curve25519xsalsa20poly1305_keypair;
//alias crypto_box_beforenm = crypto_box_curve25519xsalsa20poly1305_beforenm;
//alias crypto_box_afternm = crypto_box_curve25519xsalsa20poly1305_afternm;
//alias crypto_box_open_afternm = crypto_box_curve25519xsalsa20poly1305_open_afternm;
alias crypto_box_PUBLICKEYBYTES = crypto_box_curve25519xsalsa20poly1305_PUBLICKEYBYTES;
alias crypto_box_SECRETKEYBYTES = crypto_box_curve25519xsalsa20poly1305_SECRETKEYBYTES;
alias crypto_box_BEFORENMBYTES = crypto_box_curve25519xsalsa20poly1305_BEFORENMBYTES;
alias crypto_box_NONCEBYTES = crypto_box_curve25519xsalsa20poly1305_NONCEBYTES;
alias crypto_box_ZEROBYTES = crypto_box_curve25519xsalsa20poly1305_ZEROBYTES;
alias crypto_box_BOXZEROBYTES = crypto_box_curve25519xsalsa20poly1305_BOXZEROBYTES;
alias crypto_box_IMPLEMENTATION = crypto_box_curve25519xsalsa20poly1305_IMPLEMENTATION;
alias crypto_box_VERSION = crypto_box_curve25519xsalsa20poly1305_VERSION;
enum crypto_box_curve25519xsalsa20poly1305_tweet_PUBLICKEYBYTES = 32;
enum crypto_box_curve25519xsalsa20poly1305_tweet_SECRETKEYBYTES = 32;
enum crypto_box_curve25519xsalsa20poly1305_tweet_BEFORENMBYTES = 32;
enum crypto_box_curve25519xsalsa20poly1305_tweet_NONCEBYTES = 24;
enum crypto_box_curve25519xsalsa20poly1305_tweet_ZEROBYTES = 32;
enum crypto_box_curve25519xsalsa20poly1305_tweet_BOXZEROBYTES = 16;
extern int crypto_box_curve25519xsalsa20poly1305_tweet(ubyte *,const ubyte *,ulong,const ubyte *,const ubyte *,const ubyte *);
extern int crypto_box_curve25519xsalsa20poly1305_tweet_open(ubyte *,const ubyte *,ulong,const ubyte *,const ubyte *,const ubyte *);
extern int crypto_box_curve25519xsalsa20poly1305_tweet_keypair(ubyte *,ubyte *);
extern int crypto_box_curve25519xsalsa20poly1305_tweet_beforenm(ubyte *,const ubyte *,const ubyte *);
extern int crypto_box_curve25519xsalsa20poly1305_tweet_afternm(ubyte *,const ubyte *,ulong,const ubyte *,const ubyte *);
extern int crypto_box_curve25519xsalsa20poly1305_tweet_open_afternm(ubyte *,const ubyte *,ulong,const ubyte *,const ubyte *);
enum crypto_box_curve25519xsalsa20poly1305_tweet_VERSION = "-";
//alias crypto_box_curve25519xsalsa20poly1305 = crypto_box_curve25519xsalsa20poly1305_tweet;
//alias crypto_box_curve25519xsalsa20poly1305_open = crypto_box_curve25519xsalsa20poly1305_tweet_open;
//alias crypto_box_curve25519xsalsa20poly1305_keypair = crypto_box_curve25519xsalsa20poly1305_tweet_keypair;
//alias crypto_box_curve25519xsalsa20poly1305_beforenm = crypto_box_curve25519xsalsa20poly1305_tweet_beforenm;
//alias crypto_box_curve25519xsalsa20poly1305_afternm = crypto_box_curve25519xsalsa20poly1305_tweet_afternm;
//alias crypto_box_curve25519xsalsa20poly1305_open_afternm = crypto_box_curve25519xsalsa20poly1305_tweet_open_afternm;
alias crypto_box_curve25519xsalsa20poly1305_PUBLICKEYBYTES = crypto_box_curve25519xsalsa20poly1305_tweet_PUBLICKEYBYTES;
alias crypto_box_curve25519xsalsa20poly1305_SECRETKEYBYTES = crypto_box_curve25519xsalsa20poly1305_tweet_SECRETKEYBYTES;
alias crypto_box_curve25519xsalsa20poly1305_BEFORENMBYTES = crypto_box_curve25519xsalsa20poly1305_tweet_BEFORENMBYTES;
alias crypto_box_curve25519xsalsa20poly1305_NONCEBYTES = crypto_box_curve25519xsalsa20poly1305_tweet_NONCEBYTES;
alias crypto_box_curve25519xsalsa20poly1305_ZEROBYTES = crypto_box_curve25519xsalsa20poly1305_tweet_ZEROBYTES;
alias crypto_box_curve25519xsalsa20poly1305_BOXZEROBYTES = crypto_box_curve25519xsalsa20poly1305_tweet_BOXZEROBYTES;
alias crypto_box_curve25519xsalsa20poly1305_VERSION = crypto_box_curve25519xsalsa20poly1305_tweet_VERSION;
enum crypto_box_curve25519xsalsa20poly1305_IMPLEMENTATION = "crypto_box/curve25519xsalsa20poly1305/tweet";

enum crypto_core_PRIMITIVE = "salsa20";
//alias crypto_core = crypto_core_salsa20;
alias crypto_core_OUTPUTBYTES = crypto_core_salsa20_OUTPUTBYTES;
alias crypto_core_INPUTBYTES = crypto_core_salsa20_INPUTBYTES;
alias crypto_core_KEYBYTES = crypto_core_salsa20_KEYBYTES;
alias crypto_core_CONSTBYTES = crypto_core_salsa20_CONSTBYTES;
alias crypto_core_IMPLEMENTATION = crypto_core_salsa20_IMPLEMENTATION;
alias crypto_core_VERSION = crypto_core_salsa20_VERSION;
enum crypto_core_salsa20_tweet_OUTPUTBYTES = 64;
enum crypto_core_salsa20_tweet_INPUTBYTES = 16;
enum crypto_core_salsa20_tweet_KEYBYTES = 32;
enum crypto_core_salsa20_tweet_CONSTBYTES = 16;
//extern int crypto_core_salsa20_tweet(ubyte *,const ubyte *,const ubyte *,const ubyte *);
enum crypto_core_salsa20_tweet_VERSION = "-";
//alias crypto_core_salsa20 = crypto_core_salsa20_tweet;
alias crypto_core_salsa20_OUTPUTBYTES = crypto_core_salsa20_tweet_OUTPUTBYTES;
alias crypto_core_salsa20_INPUTBYTES = crypto_core_salsa20_tweet_INPUTBYTES;
alias crypto_core_salsa20_KEYBYTES = crypto_core_salsa20_tweet_KEYBYTES;
alias crypto_core_salsa20_CONSTBYTES = crypto_core_salsa20_tweet_CONSTBYTES;
alias crypto_core_salsa20_VERSION = crypto_core_salsa20_tweet_VERSION;
enum crypto_core_salsa20_IMPLEMENTATION = "crypto_core/salsa20/tweet";
enum crypto_core_hsalsa20_tweet_OUTPUTBYTES = 32;
enum crypto_core_hsalsa20_tweet_INPUTBYTES = 16;
enum crypto_core_hsalsa20_tweet_KEYBYTES = 32;
enum crypto_core_hsalsa20_tweet_CONSTBYTES = 16;
//extern int crypto_core_hsalsa20_tweet(ubyte *,const ubyte *,const ubyte *,const ubyte *);
enum crypto_core_hsalsa20_tweet_VERSION = "-";
//alias crypto_core_hsalsa20 = crypto_core_hsalsa20_tweet;
alias crypto_core_hsalsa20_OUTPUTBYTES = crypto_core_hsalsa20_tweet_OUTPUTBYTES;
alias crypto_core_hsalsa20_INPUTBYTES = crypto_core_hsalsa20_tweet_INPUTBYTES;
alias crypto_core_hsalsa20_KEYBYTES = crypto_core_hsalsa20_tweet_KEYBYTES;
alias crypto_core_hsalsa20_CONSTBYTES = crypto_core_hsalsa20_tweet_CONSTBYTES;
alias crypto_core_hsalsa20_VERSION = crypto_core_hsalsa20_tweet_VERSION;
enum crypto_core_hsalsa20_IMPLEMENTATION = "crypto_core/hsalsa20/tweet";

enum crypto_hashblocks_PRIMITIVE = "sha512";
//alias crypto_hashblocks = crypto_hashblocks_sha512;
alias crypto_hashblocks_STATEBYTES = crypto_hashblocks_sha512_STATEBYTES;
alias crypto_hashblocks_BLOCKBYTES = crypto_hashblocks_sha512_BLOCKBYTES;
alias crypto_hashblocks_IMPLEMENTATION = crypto_hashblocks_sha512_IMPLEMENTATION;
alias crypto_hashblocks_VERSION = crypto_hashblocks_sha512_VERSION;
enum crypto_hashblocks_sha512_tweet_STATEBYTES = 64;
enum crypto_hashblocks_sha512_tweet_BLOCKBYTES = 128;
//extern int crypto_hashblocks_sha512_tweet(ubyte *,const ubyte *,ulong);
enum crypto_hashblocks_sha512_tweet_VERSION = "-";
//alias crypto_hashblocks_sha512 = crypto_hashblocks_sha512_tweet;
alias crypto_hashblocks_sha512_STATEBYTES = crypto_hashblocks_sha512_tweet_STATEBYTES;
alias crypto_hashblocks_sha512_BLOCKBYTES = crypto_hashblocks_sha512_tweet_BLOCKBYTES;
alias crypto_hashblocks_sha512_VERSION = crypto_hashblocks_sha512_tweet_VERSION;
enum crypto_hashblocks_sha512_IMPLEMENTATION = "crypto_hashblocks/sha512/tweet";
enum crypto_hashblocks_sha256_tweet_STATEBYTES = 32;
enum crypto_hashblocks_sha256_tweet_BLOCKBYTES = 64;
//extern int crypto_hashblocks_sha256_tweet(ubyte *,const ubyte *,ulong);
enum crypto_hashblocks_sha256_tweet_VERSION = "-";
//alias crypto_hashblocks_sha256 = crypto_hashblocks_sha256_tweet;
alias crypto_hashblocks_sha256_STATEBYTES = crypto_hashblocks_sha256_tweet_STATEBYTES;
alias crypto_hashblocks_sha256_BLOCKBYTES = crypto_hashblocks_sha256_tweet_BLOCKBYTES;
alias crypto_hashblocks_sha256_VERSION = crypto_hashblocks_sha256_tweet_VERSION;
enum crypto_hashblocks_sha256_IMPLEMENTATION = "crypto_hashblocks/sha256/tweet";

enum crypto_hash_PRIMITIVE = "sha512";
//alias crypto_hash = crypto_hash_sha512;
alias crypto_hash_BYTES = crypto_hash_sha512_BYTES;
alias crypto_hash_IMPLEMENTATION = crypto_hash_sha512_IMPLEMENTATION;
alias crypto_hash_VERSION = crypto_hash_sha512_VERSION;
enum crypto_hash_sha512_tweet_BYTES = 64;
//extern int crypto_hash_sha512_tweet(ubyte *,const ubyte *,ulong);
enum crypto_hash_sha512_tweet_VERSION = "-";
//alias crypto_hash_sha512 = crypto_hash_sha512_tweet;
alias crypto_hash_sha512_BYTES = crypto_hash_sha512_tweet_BYTES;
alias crypto_hash_sha512_VERSION = crypto_hash_sha512_tweet_VERSION;
enum crypto_hash_sha512_IMPLEMENTATION = "crypto_hash/sha512/tweet";
enum crypto_hash_sha256_tweet_BYTES = 32;
//extern int crypto_hash_sha256_tweet(ubyte *,const ubyte *,ulong);
enum crypto_hash_sha256_tweet_VERSION = "-";
//alias crypto_hash_sha256 = crypto_hash_sha256_tweet;
alias crypto_hash_sha256_BYTES = crypto_hash_sha256_tweet_BYTES;
alias crypto_hash_sha256_VERSION = crypto_hash_sha256_tweet_VERSION;
enum crypto_hash_sha256_IMPLEMENTATION = "crypto_hash/sha256/tweet";

enum crypto_onetimeauth_PRIMITIVE = "poly1305";
//alias crypto_onetimeauth = crypto_onetimeauth_poly1305;
//alias crypto_onetimeauth_verify = crypto_onetimeauth_poly1305_verify;
alias crypto_onetimeauth_BYTES = crypto_onetimeauth_poly1305_BYTES;
alias crypto_onetimeauth_KEYBYTES = crypto_onetimeauth_poly1305_KEYBYTES;
alias crypto_onetimeauth_IMPLEMENTATION = crypto_onetimeauth_poly1305_IMPLEMENTATION;
alias crypto_onetimeauth_VERSION = crypto_onetimeauth_poly1305_VERSION;
enum crypto_onetimeauth_poly1305_tweet_BYTES = 16;
enum crypto_onetimeauth_poly1305_tweet_KEYBYTES = 32;
//extern int crypto_onetimeauth_poly1305_tweet(ubyte *,const ubyte *,ulong,const ubyte *);
//extern int crypto_onetimeauth_poly1305_tweet_verify(const ubyte *,const ubyte *,ulong,const ubyte *);
enum crypto_onetimeauth_poly1305_tweet_VERSION = "-";
//alias crypto_onetimeauth_poly1305 = crypto_onetimeauth_poly1305_tweet;
//alias crypto_onetimeauth_poly1305_verify = crypto_onetimeauth_poly1305_tweet_verify;
alias crypto_onetimeauth_poly1305_BYTES = crypto_onetimeauth_poly1305_tweet_BYTES;
alias crypto_onetimeauth_poly1305_KEYBYTES = crypto_onetimeauth_poly1305_tweet_KEYBYTES;
alias crypto_onetimeauth_poly1305_VERSION = crypto_onetimeauth_poly1305_tweet_VERSION;
enum crypto_onetimeauth_poly1305_IMPLEMENTATION = "crypto_onetimeauth/poly1305/tweet";

enum crypto_scalarmult_PRIMITIVE = "curve25519";
//alias crypto_scalarmult = crypto_scalarmult_curve25519;
//alias crypto_scalarmult_base = crypto_scalarmult_curve25519_base;
alias crypto_scalarmult_BYTES = crypto_scalarmult_curve25519_BYTES;
alias crypto_scalarmult_SCALARBYTES = crypto_scalarmult_curve25519_SCALARBYTES;
alias crypto_scalarmult_IMPLEMENTATION = crypto_scalarmult_curve25519_IMPLEMENTATION;
alias crypto_scalarmult_VERSION = crypto_scalarmult_curve25519_VERSION;
enum crypto_scalarmult_curve25519_tweet_BYTES = 32;
enum crypto_scalarmult_curve25519_tweet_SCALARBYTES = 32;
//extern int crypto_scalarmult_curve25519_tweet(ubyte *,const ubyte *,const ubyte *);
//extern int crypto_scalarmult_curve25519_tweet_base(ubyte *,const ubyte *);
enum crypto_scalarmult_curve25519_tweet_VERSION = "-";
//alias crypto_scalarmult_curve25519 = crypto_scalarmult_curve25519_tweet;
//alias crypto_scalarmult_curve25519_base = crypto_scalarmult_curve25519_tweet_base;
alias crypto_scalarmult_curve25519_BYTES = crypto_scalarmult_curve25519_tweet_BYTES;
alias crypto_scalarmult_curve25519_SCALARBYTES = crypto_scalarmult_curve25519_tweet_SCALARBYTES;
alias crypto_scalarmult_curve25519_VERSION = crypto_scalarmult_curve25519_tweet_VERSION;
enum crypto_scalarmult_curve25519_IMPLEMENTATION = "crypto_scalarmult/curve25519/tweet";

enum crypto_secretbox_PRIMITIVE = "xsalsa20poly1305";
//alias crypto_secretbox = crypto_secretbox_xsalsa20poly1305;
//alias crypto_secretbox_open = crypto_secretbox_xsalsa20poly1305_open;
alias crypto_secretbox_KEYBYTES = crypto_secretbox_xsalsa20poly1305_KEYBYTES;
alias crypto_secretbox_NONCEBYTES = crypto_secretbox_xsalsa20poly1305_NONCEBYTES;
alias crypto_secretbox_ZEROBYTES = crypto_secretbox_xsalsa20poly1305_ZEROBYTES;
alias crypto_secretbox_BOXZEROBYTES = crypto_secretbox_xsalsa20poly1305_BOXZEROBYTES;
alias crypto_secretbox_IMPLEMENTATION = crypto_secretbox_xsalsa20poly1305_IMPLEMENTATION;
alias crypto_secretbox_VERSION = crypto_secretbox_xsalsa20poly1305_VERSION;
enum crypto_secretbox_xsalsa20poly1305_tweet_KEYBYTES = 32;
enum crypto_secretbox_xsalsa20poly1305_tweet_NONCEBYTES = 24;
enum crypto_secretbox_xsalsa20poly1305_tweet_ZEROBYTES = 32;
enum crypto_secretbox_xsalsa20poly1305_tweet_BOXZEROBYTES = 16;
//extern int crypto_secretbox_xsalsa20poly1305_tweet(ubyte *,const ubyte *,ulong,const ubyte *,const ubyte *);
//extern int crypto_secretbox_xsalsa20poly1305_tweet_open(ubyte *,const ubyte *,ulong,const ubyte *,const ubyte *);
enum crypto_secretbox_xsalsa20poly1305_tweet_VERSION = "-";
//alias crypto_secretbox_xsalsa20poly1305 = crypto_secretbox_xsalsa20poly1305_tweet;
//alias crypto_secretbox_xsalsa20poly1305_open = crypto_secretbox_xsalsa20poly1305_tweet_open;
alias crypto_secretbox_xsalsa20poly1305_KEYBYTES = crypto_secretbox_xsalsa20poly1305_tweet_KEYBYTES;
alias crypto_secretbox_xsalsa20poly1305_NONCEBYTES = crypto_secretbox_xsalsa20poly1305_tweet_NONCEBYTES;
alias crypto_secretbox_xsalsa20poly1305_ZEROBYTES = crypto_secretbox_xsalsa20poly1305_tweet_ZEROBYTES;
alias crypto_secretbox_xsalsa20poly1305_BOXZEROBYTES = crypto_secretbox_xsalsa20poly1305_tweet_BOXZEROBYTES;
alias crypto_secretbox_xsalsa20poly1305_VERSION = crypto_secretbox_xsalsa20poly1305_tweet_VERSION;
enum crypto_secretbox_xsalsa20poly1305_IMPLEMENTATION = "crypto_secretbox/xsalsa20poly1305/tweet";

enum crypto_sign_PRIMITIVE = "ed25519";
//alias crypto_sign = crypto_sign_ed25519;
//alias crypto_sign_open = crypto_sign_ed25519_open;
//alias crypto_sign_keypair = crypto_sign_ed25519_keypair;
alias crypto_sign_BYTES = crypto_sign_ed25519_BYTES;
alias crypto_sign_SEEDBYTES = crypto_sign_ed25519_tweet_SEEDBYTES;
alias crypto_sign_PUBLICKEYBYTES = crypto_sign_ed25519_PUBLICKEYBYTES;
alias crypto_sign_SECRETKEYBYTES = crypto_sign_ed25519_SECRETKEYBYTES;
alias crypto_sign_IMPLEMENTATION = crypto_sign_ed25519_IMPLEMENTATION;
alias crypto_sign_VERSION = crypto_sign_ed25519_VERSION;
enum crypto_sign_ed25519_tweet_BYTES = 64;
enum crypto_sign_ed25519_tweet_SEEDBYTES = 32;
enum crypto_sign_ed25519_tweet_PUBLICKEYBYTES = 32;
enum crypto_sign_ed25519_tweet_SECRETKEYBYTES = 64;
//extern int crypto_sign_ed25519_tweet(ubyte *,ulong *,const ubyte *,ulong,const ubyte *);
//extern int crypto_sign_ed25519_tweet_open(ubyte *,ulong *,const ubyte *,ulong,const ubyte *);
//extern int crypto_sign_ed25519_tweet_keypair(ubyte *,ubyte *);
enum crypto_sign_ed25519_tweet_VERSION = "-";
//alias crypto_sign_ed25519 = crypto_sign_ed25519_tweet;
//alias crypto_sign_ed25519_open = crypto_sign_ed25519_tweet_open;
//alias crypto_sign_ed25519_keypair = crypto_sign_ed25519_tweet_keypair;
alias crypto_sign_ed25519_BYTES = crypto_sign_ed25519_tweet_BYTES;
alias crypto_sign_ed25519_SEEDBYTES = crypto_sign_ed25519_tweet_SEEDBYTES;
alias crypto_sign_ed25519_PUBLICKEYBYTES = crypto_sign_ed25519_tweet_PUBLICKEYBYTES;
alias crypto_sign_ed25519_SECRETKEYBYTES = crypto_sign_ed25519_tweet_SECRETKEYBYTES;
alias crypto_sign_ed25519_VERSION = crypto_sign_ed25519_tweet_VERSION;
enum crypto_sign_ed25519_IMPLEMENTATION = "crypto_sign/ed25519/tweet";

enum crypto_stream_PRIMITIVE = "xsalsa20";
//alias crypto_stream = crypto_stream_xsalsa20;
//alias crypto_stream_xor = crypto_stream_xsalsa20_xor;
alias crypto_stream_KEYBYTES = crypto_stream_xsalsa20_KEYBYTES;
alias crypto_stream_NONCEBYTES = crypto_stream_xsalsa20_NONCEBYTES;
alias crypto_stream_IMPLEMENTATION = crypto_stream_xsalsa20_IMPLEMENTATION;
alias crypto_stream_VERSION = crypto_stream_xsalsa20_VERSION;
enum crypto_stream_xsalsa20_tweet_KEYBYTES = 32;
enum crypto_stream_xsalsa20_tweet_NONCEBYTES = 24;
//extern int crypto_stream_xsalsa20_tweet(ubyte *,ulong,const ubyte *,const ubyte *);
//extern int crypto_stream_xsalsa20_tweet_xor(ubyte *,const ubyte *,ulong,const ubyte *,const ubyte *);
enum crypto_stream_xsalsa20_tweet_VERSION = "-";
//alias crypto_stream_xsalsa20 = crypto_stream_xsalsa20_tweet;
//alias crypto_stream_xsalsa20_xor = crypto_stream_xsalsa20_tweet_xor;
alias crypto_stream_xsalsa20_KEYBYTES = crypto_stream_xsalsa20_tweet_KEYBYTES;
alias crypto_stream_xsalsa20_NONCEBYTES = crypto_stream_xsalsa20_tweet_NONCEBYTES;
alias crypto_stream_xsalsa20_VERSION = crypto_stream_xsalsa20_tweet_VERSION;
enum crypto_stream_xsalsa20_IMPLEMENTATION = "crypto_stream/xsalsa20/tweet";
enum crypto_stream_salsa20_tweet_KEYBYTES = 32;
enum crypto_stream_salsa20_tweet_NONCEBYTES = 8;
//extern int crypto_stream_salsa20_tweet(ubyte *,ulong,const ubyte *,const ubyte *);
//extern int crypto_stream_salsa20_tweet_xor(ubyte *,const ubyte *,ulong,const ubyte *,const ubyte *);
enum crypto_stream_salsa20_tweet_VERSION = "-";
//alias crypto_stream_salsa20 = crypto_stream_salsa20_tweet;
//alias crypto_stream_salsa20_xor = crypto_stream_salsa20_tweet_xor;
alias crypto_stream_salsa20_KEYBYTES = crypto_stream_salsa20_tweet_KEYBYTES;
alias crypto_stream_salsa20_NONCEBYTES = crypto_stream_salsa20_tweet_NONCEBYTES;
alias crypto_stream_salsa20_VERSION = crypto_stream_salsa20_tweet_VERSION;
enum crypto_stream_salsa20_IMPLEMENTATION = "crypto_stream/salsa20/tweet";

enum crypto_verify_PRIMITIVE = "16";
//alias crypto_verify = crypto_verify_16;
alias crypto_verify_BYTES = crypto_verify_16_BYTES;
alias crypto_verify_IMPLEMENTATION = crypto_verify_16_IMPLEMENTATION;
alias crypto_verify_VERSION = crypto_verify_16_VERSION;
enum crypto_verify_16_tweet_BYTES = 16;
//extern int crypto_verify_16_tweet(const ubyte *,const ubyte *);
enum crypto_verify_16_tweet_VERSION = "-";
//alias crypto_verify_16 = crypto_verify_16_tweet;
alias crypto_verify_16_BYTES = crypto_verify_16_tweet_BYTES;
alias crypto_verify_16_VERSION = crypto_verify_16_tweet_VERSION;
enum crypto_verify_16_IMPLEMENTATION = "crypto_verify/16/tweet";
enum crypto_verify_32_tweet_BYTES = 32;
//extern int crypto_verify_32_tweet(const ubyte *,const ubyte *);
enum crypto_verify_32_tweet_VERSION = "-";
//alias crypto_verify_32 = crypto_verify_32_tweet;
alias crypto_verify_32_BYTES = crypto_verify_32_tweet_BYTES;
alias crypto_verify_32_VERSION = crypto_verify_32_tweet_VERSION;
enum crypto_verify_32_IMPLEMENTATION = "crypto_verify/32/tweet";



